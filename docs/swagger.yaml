basePath: /
definitions:
  auth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  auth.LoginUserReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginUserResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  auth.RegisterResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  auth.RegisterUserReq:
    properties:
      email:
        type: string
      first_name:
        type: string
      gender:
        type: integer
      last_name:
        type: string
      middle_name:
        type: string
      password:
        type: string
      phone:
        type: string
      profile_pic:
        type: string
    required:
    - email
    - password
    type: object
  auth.commonResponse:
    properties:
      message:
        type: string
    type: object
  restaurants.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  restaurants.Restaurant:
    properties:
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      rating:
        type: number
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample boilerplate server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Gin API Boilerplate
  version: "2.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log in a customer and generate a JWT token
      parameters:
      - description: Login request
        in: body
        name: LoginUserReq
        required: true
        schema:
          $ref: '#/definitions/auth.LoginUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Log in a customer
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out a customer
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.commonResponse'
      security:
      - ApiKeyAuth: []
      summary: Log out a customer
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new customer and generate a JWT token
      parameters:
      - description: Registration request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
      summary: Register a new customer
      tags:
      - Authentication
  /health-check:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: HealthCheck
      tags:
      - Health Check
  /restaurants:
    get:
      consumes:
      - application/json
      description: Get a list of all restaurants
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/restaurants.Restaurant'
            type: array
      summary: Get a list of restaurants
      tags:
      - 'CRUD API Sample: Restaurant'
    post:
      consumes:
      - application/json
      description: Add a new restaurant to the database
      parameters:
      - description: Restaurant object to add
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/restaurants.Restaurant'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/restaurants.Restaurant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/restaurants.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/restaurants.ErrorResponse'
      summary: Add a new restaurant
      tags:
      - 'CRUD API Sample: Restaurant'
  /restaurants/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a restaurant from the database by its ID
      parameters:
      - description: Restaurant ID to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/restaurants.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/restaurants.ErrorResponse'
      summary: Delete a restaurant by ID
      tags:
      - 'CRUD API Sample: Restaurant'
    put:
      consumes:
      - application/json
      description: Update an existing restaurant in the database by its ID
      parameters:
      - description: Restaurant ID to update
        in: path
        name: id
        required: true
        type: integer
      - description: Updated restaurant object
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/restaurants.Restaurant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restaurants.Restaurant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/restaurants.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/restaurants.ErrorResponse'
      summary: Update a restaurant by ID
      tags:
      - 'CRUD API Sample: Restaurant'
schemes:
- http
swagger: "2.0"
